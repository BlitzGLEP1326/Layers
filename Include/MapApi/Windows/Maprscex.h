/******* MAPRSCEX.H  *********** Panteleeva N.A. ****** 30/08/05 ***
*                                                                  *
*              Copyright (c) PANORAMA Group 1991-2005              *
*                      All Rights Reserved                         *
*                                                                  *
********************************************************************
*                                                                  *
*       ОПИСАНИЕ ФУНКЦИЙ ДОСТУПА К СЕРИИ ОБ'ЕКТОВ                  *
*       ДОПОЛНИТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ КЛАССИФИКАТОРА                  *
*        ИНТЕРФЕЙС ДЛЯ ПРОГРАММ НА ЯЗЫКАХ C, PASCAL, BASIC         *
*                                                                  *
********************************************************************
*                                                                  *
*                 ИМПОРТИРОВАНИЕ ФУНКЦИЙ :                         *
*                                                                  *
*    // Загрузка библиотеки                                        *
*    HINSTANCE libInst = ::LoadLibrary("maprscex.dll");            *
*                                                                  *
*    // Вызов функции                                              *
*    long int (WINAPI * lpfn) (HRSC hRsc, long int code,           *
*                                        long int local);          *
*    (FARPROC)lpfn = GetProcAddress(libInst, "mapSeriaDelete");    *
*    long int retcode = (*lpfn)(hRsc, code, local);                *
*                                                                  *
*    // Выгрузка библиотеки                                        *
*    ::FreeLibrary(libInst);                                       *
*                                                                  *
*******************************************************************/

#ifndef MAPRSCEX_H
#define MAPRSCEX_H

#ifndef MAPMACRO_H
 #include "mapmacro.h"
#endif

#ifndef RSCAPI_H
   #include "rscapi.h"
#endif

typedef struct ELEMTREEE
{
   long Ident;           // Идентификатор объекта (или 0, у слоя)
   long Depth;           // Глубина вложенности в дерево
   long LayerNumber;     // Номер слоя
   long ParentNumber;    // Номер родителя в общем массиве элементов
   long PictureIndex;    // Индекс в массиве изображений
   char Code[28];        // Форматированное представление кода(как сортировали)
                         // с указанием принадлежности к серии и локализации
}
  ELEMTREEE;


 typedef struct SERIALIMIT          // Интервалы значений семантики,соответст-
                                    // вующие определенным видам объектов
  {
    long int Code      ;            // Код семантики
    long int Count     ;            // Количество ограничителей (>=2)
    double   Value[256];            // Значения ограничителей
  }
   SERIALIMIT;


 typedef struct SERIATYPE           // Справочные данные о серии
  {
    unsigned long  int Excode     ; // Классификационный код об'ектов серии
    long int           Local      ; // Характер локализации  об'ектов серии
    long int           Count      ; // Количество объектов серии
    long int           FirstCode  ; // Код первой семантики
    long int           FirstCount ; // Количество ограничителей по 1 семантике
    long int           SecondCode ; // Код второй семантики
    long int           SecondCount; // Количество ограничителей по 2 семантике
  }
   SERIATYPE;

 typedef struct SERIAPLACE          // Место объекта в серии
  {
    long int FirstCode   ;          // Код семантики
    long int FirstNumber ;          // Номер ограничителя (с 1)
    long int SecondCode  ;          // Код семантики ,если серия по одной
                                    // семантике,то равен нулю
    long int SecondNumber;          // Номер ограничителя (с 1)
  }
   SERIAPLACE;

// Для создания серии объектов необходимо:
// - создать серию по описанию первого объекта и интервалов значений семантик
//   ( mapSeriaCreate );
// - добавить остальные объекты в созданную серию с указанием их места
//   ( mapSeriaAppendObject );
// - при необходимости назначить места объектов в серии
//   ( mapSeriaSetObject );
// - задать вид (по внутреннему коду для каждого объекта серии)
//   ( mapSetRscObjectImage см. RSCAPI.H);

extern "C"
{

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++ ОПИСАНИЕ ФУНКЦИЙ ДОСТУПА К СЕРИИ ОБ'ЕКТОВ    ++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 // Создать серию
 // hRsc - идентификатор классификатора карты
 // RSCOBJECT -  описание объекта (см. maptype.h)
 // first, second - интервалы значений семантик серии
 // Если серия по одной семантике, second = 0
 // При ошибке возвращает 0, иначе - внутренний код объекта

 long int WINAPI mapSeriaCreate(HRSC hRsc, SERIALIMIT * first,
                                SERIALIMIT * second, RSCOBJECT * object);

 // Обновить серию
 // hRsc - идентификатор классификатора карты
 // code - классификационный код объектов входящих в cерию
 // local - локализация объектов серии ( LOCAL_POINT, ...)
 // first, second - интервалы значений семантик серии
 // Если серия по одной семантике, second = 0
 // Если серии с таким кодом и локализацией нет , она создается
 // Если такой объект или серия уже была - по возможности согласуются
 // с новой(у новой приоритет), при сильных расхождениях - старая серия
 // удаляется, новая создается - все объекты сохраняются
 // Если серия по одной семантике second = 0
 // При ошибке возвращает 0, иначе - внутренний код объекта

 long int  WINAPI mapSeriaUpdate(HRSC hRsc, long int code,
                                 long int local, SERIALIMIT * first,
                                 SERIALIMIT * second);


 // Добавить объект в существующую серию
 // hRsc - идентификатор классификатора карты
 // RSCOBJECT -  описание объекта (см. maptype.h)
 // SERIAPLACE - место объекта в серии
 // При ошибке возвращает 0, иначе - внутренний код объекта

 long int WINAPI mapSeriaAppendObject(HRSC hRsc, RSCOBJECT * object,
                                                 SERIAPLACE * place);

 // Удалить серию
 // hRsc - идентификатор классификатора карты
 // code - классификационный код объектов входящих в cерию
 // local - локализация объектов серии ( LOCAL_POINT, ...)
 // При ошибке возвращает ноль

  long int  WINAPI mapSeriaDelete (HRSC hRsc, long int code, long int local);

 // Запросить информацию по серии
 // hRsc - идентификатор классификатора карты
 // code - классификационный код объектов входящих в cерию
 // local - локализация объектов серии ( LOCAL_POINT, ...)
 // При ошибке возвращает ноль

  long int  WINAPI mapSeriaDescribe(HRSC hRsc, long int code,long int local,
                                    SERIATYPE * seria);

 // назначить семантику всем объектам серии (не видовую)


 // Запросить информацию по значениям ограничителей семантики серии
 // hRsc - идентификатор классификатора карты
 // incode - внутренний код ( индекс ) любого объекта серии
 // limit->Code - код запрашиваемой семантики
 // При ошибке возвращает ноль, иначе номер семантики в серии (1/2)
 // по адресу limit - должно быть памяти  sizeof(SERIALIMIT)

  long int  WINAPI mapSeriaDescribeLimit(HRSC hRsc, long int incode,
                              SERIALIMIT * limit);

  // Назначить место объекта в серии (объект может повторяться)
  // hRsc - идентификатор классификатора карты
  // incode - внутренний код ( индекс ) объекта
  // При ошибке возвращает ноль , иначе - внутренний код объекта

  long int  WINAPI mapSeriaSetObject(HRSC hRsc, long int incode,
                                     SERIAPLACE * place);

  // Запросить внутренний код объекта по месту в серии
  // hRsc - идентификатор классификатора карты
  // code - классификационный код объектов входящих в cерию
  // local - локализация объектов серии ( LOCAL_POINT, ...)
  // При ошибке возвращает ноль , иначе - внутренний код объекта

  long int  WINAPI mapSeriaGetObject(HRSC hRsc, long int code,long int local,
                                     SERIAPLACE * place);

  // назначить семантику всем объектам серии (не видовую)      //10/12/01
  // hRsc - идентификатор классификатора карты
  // code - классификационный код объектов входящих в cерию
  // local - локализация объектов серии ( LOCAL_POINT, ...)
  // semanticcode - код семантики
  // importance значимость семантики  см. maptype.h
  // (POSSIBLE_SEMANTIC или MUST_SEMANTIC) )

  long int  WINAPI mapSeriaSetObjectSemantic(HRSC hRsc, long int code,long int local,
                                     long int semanticcode, long int importance);



 // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 // +++++ ОПИСАНИЕ ДОПОЛНИТЕЛЬНЫХ ФУНКЦИЙ ДОСТУПА К ПАЛИТРЕ    ++++++
 // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  // Добавить палитру                                                // 27/11/01
  // hRsc - идентификатор классификатора карты
  // palette - цвета палитры,count - количество цветов в палитре (16,32,64,256)
  // name    - название палитры
  // При ошибке возвращает ноль иначе 1

  long int WINAPI mapRscAppendPalette(HRSC hRsc, COLORREF * palette,
                                    int count,char *name);

  // Установить количество цветов в классификаторе            // 27/11/01
  // hRsc - идентификатор классификатора карты
  // count - количество цветов в палитре (16,32,64,256)
  // При ошибке возвращает ноль иначе 1

  long int WINAPI mapRscSetColorCount(HRSC hRsc,int count);

 // Запросить палитру классификатора по порядковому номеру (с 1)    // 27/11/01
 // hRsc - идентификатор классификатора карты
 // number - порядковый номер палитры
 // Возвращает указатель на палитру
 // При ошибке возвращает ноль
 COLORREF * WINAPI mapRscGetPalette(HRSC hRsc,int number);

 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 // +++++ ОПИСАНИЕ ДОПОЛНИТЕЛЬНЫХ ФУНКЦИЙ ДОСТУПА К БИБЛИОТЕКАМ    ++++++
 // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  // Запросить количество библиотек пользователя                 // 16/10/04
  // hRsc - идентификатор классификатора карты
  // При ошибке или отсутствии подключенных библиотек возвращает ноль

  long int WINAPI mapGetRscImlCount(HRSC hRsc);

  // Запросить порядковый номер библиотеки пользователя(с 1)       // 30/01/02
  // hRsc - идентификатор классификатора карты
  // соde - код библиотеки
  // При ошибке возвращает ноль

  long int WINAPI mapGetRscImlOrder(HRSC hRsc,long code);

  // Запросить имя библиотеки по порядковому номеру (c 1)
  // hRsc - идентификатор классификатора карты
  // При ошибке возвращает пустую строку

  char *  WINAPI mapGetRscImlNameDLL(HRSC hRsc,long number);

  // Запросить условное имя библиотеки по порядковому номеру (c 1)
  // hRsc - идентификатор классификатора карты
  // При ошибке возвращает пустую строку

  char * WINAPI mapGetRscImlName(HRSC hRsc,long number);

  // Добавить библиотеку
  // hRsc - идентификатор классификатора карты
  // nameDll - имя библиотеки
  // nameUser - условное имя
  // Возвращает код библиотеки
  // При ошибке возвращает 0

  long int WINAPI mapAppendRscIml(HRSC hRsc, char * nameDll,char * nameUser);

 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 // +++++ ОПИСАНИЕ ФУНКЦИЙ ПОСТРОЕНИЯ ДЕРЕВА ОБЪЕКТОВ КЛАССИФИКАТОРА  ++++
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 // Для использования дерева объектов необходимо:
 // Запросить максимальный размер
 // Выделить память под размещение нужного количества структур ELEMTREEE,
 // Вызвать функцию построения дерева
 // Заполнять элементы по порядку. Для слоя incode равно 0
 // У каждого элемента указан номер элемента - родителя

  // Посчитать максимальное число элементов дерева объектов
  long int WINAPI mapCountRscTreeObject(HRSC hRsc);

  // Выгрузить дерево построенное по Rsc и фильтру в выделенную область памяти
  // hRsc - идентификатор классификатора карты
  // hSelect - идентификатор фильтра (может быть 0)
  // size    - размер выделенной области для размещения дерева(в байтах)
  // elemtree - указатель на выделенную область
  // Возвращает точное количество элементов дерева
  // При ошибке возвращает 0

  long int WINAPI mapBuildRscTree(HRSC hRsc, HSELECT hSelect, long size,
                               ELEMTREEE * elemtree);

} // extern "C"

#endif