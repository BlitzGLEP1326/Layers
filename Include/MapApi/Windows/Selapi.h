/****** SELAPI.H *************** Nefedieva O.A.  ****** 03/02/06 ***
******* SELAPI.H *************** Dishlenko S.G.  ****** 08/07/04 ***
******* SELAPI.H *************** Belenkov  O.V.  ****** 12/07/04 ***
*                                                                  *
*              Copyright (c) PANORAMA Group 1991-2006             *
*                      All Rights Reserved                         *
*                                                                  *
********************************************************************
*                                                                  *
*                  FOR  WINDOWS95,98 & WINDOWS NT                  *
*                                                                  *
********************************************************************
*                                                                  *
*        ОПИСАНИЕ ФУНКЦИЙ УСТАНОВКИ ФИЛЬТРА ОБЪЕКТОВ КАРТЫ         *
*        ИНТЕРФЕЙС ДЛЯ ПРОГРАММ НА ЯЗЫКАХ C, PASCAL, BASIC         *
*                                                                  *
********************************************************************
*                                                                  *
*                 ИМПОРТИРОВАНИЕ ФУНКЦИЙ :                         *
*                                                                  *
*                                                                  *
*    // Загрузка библиотеки                                        *
*    HINSTANCE libInst = ::LoadLibrary("mapselec.dll");            *
*                                   или "gisforms.dll"             *
*    // Вызов функции                                              *
*    long int (WINAPI * Filter)(HMAP hmap,                         *
*                               TASKPARM* parm,                    *
*                               int* note);                        *
*    (FARPROC)Filter = GetProcAddress(libInst,"selSetViewStaff");  *
*    int res = (*Filter)(hmap,parm,note);                          *
*    ...                                                           *
*                                                                  *
*    // Выгрузка библиотеки                                        *
*    ::FreeLibrary(libInst);                                       *
*                                                                  *
*******************************************************************/

#ifndef SELAPI_H
#define SELAPI_H

#ifndef MAPTYPE_H
  #include "maptype.h"     // Описание структур интерфейса MAPAPI
#endif

// Описание структуры параметров для фильтра листов                   25/11/02

typedef  char LISTSNAME[MAX_PATH];   // Имя листа

typedef struct  NAMESARRAY
{
   long int   Size;          // Размер структуры
   long int   Count;         // Количество записей LISTSNAME
   LISTSNAME  Record[1];     // Записи
}
	NAMESARRAY;

//#define IDN_STAFFD                  6703
//#define IDN_SEARCHD                 6704

// Для вызова помощи в диалогах необходимо в структуре TASKPARM
// установить путь к файлу *.hlp,который содержит топики
// с идентификаторами "6703" для фильтра отображаемых объектов
// и "6704" для фильтра поиска объектов карты

// Описание структуры параметров для восстановления параметров поиска объектов.
// Используется для изменения стандартного восстановления параметров поиска
// объектов карты функцией selSetObjectSearchEx(...)

typedef struct RESTOREMODE
{
   long int    Note;          // Переменная для восстановления/запоминания состояния диалога
   long int    VisualSeek;    // Флаг поиска среди видимых на карте объектов.
   long int    MapSeek;       // Флаг поиска по картам.
   long int    RestoreSelect; // Флаг восстановления контекста поиска.
}
   RESTOREMODE;

// Параметры        Значения

// Note             номер активной закладки диалога поиска при старте программы
// VisualSeek
//                  "-1" - стандартно восстановить значение;
//                  "0"  - установить поиск без учета видимости объектов;
//                  "1"  - установить поиск с учетом видимости объектов.
// MapSeek
//                  "-1" - стандартно восстановить значение;
//                  "-2" - установить поиск по всем картам;
//                  "0...n" - установить поиск в карте с указанным номером.
// RestoreSelect
//                  "-1" - стандартно восстановить контекст поиска;
//                  "0"  - использовать текущее состояние контекста поиска.


// Описание структуры параметров для диалога поиска объектов по области.

typedef struct AREASEEKPARM
{
   long int Size;          // Размер структкры.
   long int RestoreSelect; // Флаг восстановления контекста поиска по области.
   long int ToSelectArea;  // Флаг выбора области поиска
   long int VisualSeek;    // Флаг поиска среди видимых на карте объектов.
   long int MapSeek;       // Флаг поиска по картам.
   long int AreaType;      // Тип области поиска: объект/фрагмент карты.
   long int InsideFlag;    // Флаг границ поиска.
   long int FilterFlag;    // Флаг использования фильтра объектов.
   long int AreaAction;    // Порядок поиска объектов карты.
	long int InversionFlag; // Флаг инверсного выделения объектов       26/02/02
   double   Distance;      // Расстояние поиска (в метрах).
}
   AREASEEKPARM;

// Параметры        Значения

// RestoreSelect
//                  "-1" - стандартно восстановить контекст поиска;
//                  "0"  - использовать текущее состояние контекста поиска.
// VisualSeek
//                  "-1" - стандартно восстановить значение;
//                  "0"  - установить поиск без учета видимости объектов;
//                  "1"  - установить поиск с учетом видимости объектов.
// MapSeek
//                  "-1" - стандартно восстановить значение;
//                  "-2" - установить поиск по всем картам;
//                  "0...n" - установить поиск в карте с указанным номером.
// ToSelectArea
//                  "0"  - не выполнять выбор области;
//                  "1"  - выполнять выбор области.
// AreaType
//                  "0"  - область задана фрагментом карты;
//                  "1"  - область задана объектом карты.
// InsideFlag
//                  "0"  - искать объекты вне области;
//                  "1"  - искать объекты, входящие в область хотя бы одной точкой;
//                  "2"  - искать объекты, находящиеся целиком внутри области.
// FilterFlag
//                  "0"  - не использовать фильтр объектов;
//                  "1"  - использовать установленный фильтр объектов.
// AreaAction
//                  "0"  - последовательный поиск по мере запроса объектов;
//                  "1"  - предварительный отбор всех объектов, удовлетворяющих
//                         текущим параметрам поска.
// Distance              - расстояние поиска в метрах.

//#ifdef WIN32API                               // 16/10/02   // 08/07/04
extern "C"
{

 // Установить фильтр отображаемых объектов карты
 // hmap    - идентификатор открытой векторнй карты
 // parm    - параметры задачи (см. maptype.h)
 // note    - адрес переменной,определяющей вид окна и содержащей
 //           индекс активной закладки при старте программы фильтра (допустимо note = 0).
 // restoremode - флаг восстановления контекста отображения карты :
 //           "-1" - стандартно восстановить контекст отображения;
 //           "0"  - использовать текущее состояние контекста отображения.
 // Если фильтр изменился, возвращает ненулевое значение

 long int _export WINAPI selSetViewStaffEx(HMAP hmap,
											TASKPARM* parm,
                                 long int* note,
                                 long int restoremode);

 // Установить фильтр отображения объектов карты
 // hmap    - идентификатор открытой векторнй карты
 // parm    - параметры задачи (см. maptype.h)
 // note    - адрес переменной,определяющей вид окна и содержащей
 //           индекс активной закладки при старте программы фильтра
 //           (допустимо note = 0).
 // Если фильтр изменился, возвращает ненулевое значение
 long int _export WINAPI selSetViewStaff(HMAP hmap, TASKPARM* parm,
                                        long int* note);

 // Установить фильтр поиска объектов карты
 // Фильтр поиска объектов карты автоматически восстанавливается/запоминается в
 // служебном файле при старте/завершении программы.
 // hmap - идентификатор открытой векторной карты
 // note - адрес переменной,определяющей вид окна фильтра.
 //        Служит для запоминания/восстановления индекса активной закладки
 //        при старте программы фильтра.(Допустимо note = 0).
 // Возвращает: "1" - выбран режим поиска объектов;
 //             "2" - выбран режим выделения объектов карты;
 //             "0" - ошибка или отказ.

 long int _export WINAPI selSetObjectsSearch(HMAP hmap,
                                             TASKPARM* parm,
                                             long int* note);

 // Расширенная установка фильтра поиска объектов карты
 // Фильтр поиска объектов карты автоматически восстанавливается/запоминается в
 // служебном файле при старте/завершении программы.
 // Для изменения стандартных операций  восстановления используется
 // структура RESTOREMODE.
 // hmap - идентификатор открытой векторной карты;
 // parm - параметры задачи (см. maptype.h);
 // mode - параметры восстановления фильтра;
 // Возвращает: "1" - выбран режим поиска объектов;
 //             "2" - выбран режим выделения объектов карты;
 //             "0" - ошибка или отказ.

 long int _export WINAPI selSetObjectsSearchEx(HMAP hmap,
                                             TASKPARM* parm,
                                             RESTOREMODE* mode);

 // Установить параметры поиска объектов карты по области
 // hmap      - идентификатор открытой векторной карты;
 // parm      - параметры задачи (см. maptype.h);
 // hobj      - данные области поиска;
 // areaparms - параметры поиска по области;
 // hwnd      - идентификатор окна назначения сообщений WM_PROGRESSBAR
 // Возвращает: "1" - выбран режим поиска объектов;
 //             "2" - выбран режим выделения объектов карты;
 //             "3" - выбран режим выбора области;
 //             "0" - ошибка или отказ.

 long int _export WINAPI selSearchObjectByArea(TASKPARM* parm, HMAP hmap, HOBJ hobj,
                              					  HWND hwnd, AREASEEKPARM* areaparms);

 // Установить фильтр объектов карты
 // В контексте фильтра HSELECT должна быть установлена карта.
 // title - заголовок окна фильтра объектов карты,
 // если == 0, устанавливается стандартный заголовок.
 // Если фильтр изменился, возвращает ненулевое значение

 long int _export WINAPI selSetFilterTitle(TASKPARM* parm,
                              				 HSELECT hselect, HMAP hmap,
                              				 char* title);

 // Установить фильтр слоев карты
 // hwnd      - идентификатор родительского окна;
 // hrsc      - идентификатор классификатора ресурсов карты;
 // hselect   - идентификатор контекста поиска карты (фильтр);
 // title     - заголовок формы фильтра слоев карты;
 // hinstance - идентификатор библиотеки (dll) ресурсов формы фильтра.

 long int _export WINAPI selSetLayersFilter(HWND hwnd, HRSC hrsc,
                             					 HSELECT hselect, char *title,
                                				 HINSTANCE hinstance);

 // Восстановить параметры отображения карты
 // hmap - идентификатор открытой векторной карты
 // При ошибке возвращает ноль

 long int _export WINAPI selRestoreSelect(HMAP hmap);

 // Сохранить параметры отображения объектов
 // hmap - идентификатор открытой векторной карты
 // При ошибке возвращает ноль

 long int _export WINAPI selSaveSelect(HMAP hmap);

 // Выбор из классификатора карты семантической характеристики
 // hrsc - идентификатор классификатора ресурсов карты;
 // parm - параметры задачи (см. maptype.h).
 // При успешном выполнении возвращает код выбранной семантики,
 // иначе - "-1".
 long int _export WINAPI selSemanticSelect(HRSC hrsc,	TASKPARM* parm);

 // Выбор из классификатора карты семантической
 // характеристики c предустановленным кодом семантики.
 // hrsc - идентификатор классификатора ресурсов карты;
 // parm - параметры задачи (см. maptype.h);
 // code - предустановленное значение кода характеристики
 //       (при открытии формы данный код характеристики будет выбран).
 // При успешном выполнении возвращает код выбранной семантики,
 // иначе - "-1".
 long int _export WINAPI selSemanticSelectInit(HRSC hrsc,
															 TASKPARM* parm,
															 long int code);

 // Выбор из классификатора карты семантической
 // характеристики по фильтру семантик.
 // hrsc   - идентификатор классификатора ресурсов карты;
 // parm   - параметры задачи (см. maptype.h);
 // filter - массив кодов семантик для выбора (фильтр);
 // count  - количество элементов в массиве filter.
 // При успешном выполнении возвращает код выбранной семантики,
 // иначе - "-1".
 long int _export WINAPI selSemanticSelectFilter(HRSC hrsc,
																TASKPARM* parm,
																long int *filter,
																long int count);

 // Выбор из классификатора карты семантической
 // характеристики по фильтру семантик c предустановленным кодом семантики.
 // hrsc   - идентификатор классификатора ресурсов карты;
 // parm   - параметры задачи (см. maptype.h);
 // code   - предустановленное значение кода характеристики
 //          (при открытии формы данный код характеристики будет выбран);
 // filter - массив кодов семантик для выбора (фильтр);
 // count  - количество элементов в массиве filter.
 // При успешном выполнении возвращает код выбранной семантики,
 // иначе - "-1".
 long int _export WINAPI selSemanticSelectFilterInit(HRSC hrsc,
																TASKPARM* parm,
																long int code,
																long int *filter,
																long int count);

#ifdef LINUXAPI                   // 08/07/04
 // Установить фильтр поиска объектов карты
 // Фильтр поиска объектов карты автоматически восстанавливается/запоминается в
 // служебном файле при старте/завершении программы.
 // hmap - идентификатор открытой векторной карты
 // note - адрес переменной,определяющей вид окна фильтра.
 //        Служит для запоминания/восстановления индекса активной закладки
 //        при старте программы фильтра.(Допустимо note = 0).
 // Возвращает: "1" - выбран режим поиска объектов;
 //             "2" - выбран режим выделения объектов карты;
 //             "0" - ошибка или отказ.

 long int _export selSetAreaFilter(HMAP hmap, TASKPARM* parm, long int* note);
#endif

}       // extern "C"

//#endif                              // 16/10/02
#endif  // SELAPI_H
